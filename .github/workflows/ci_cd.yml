jobs:
  build:
    name: CI/CD
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Cancel previous runs
      uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}
    - continue-on-error: true
      env:
        CALLER_INPUTS: ${{ toJSON(inputs) }}
        EVENT_NAME: ${{ github.event_name }}
        INPUTS: ${{ toJSON(github.event.inputs) }}
        SECRETS: ${{ toJSON(secrets) }}
      id: inputs-and-secrets
      name: Get inputs and secrets
      run: "import os\nimport json\n\n# Overlay all inputs and secrets onto this jobs\
        \ outputs\ncallerInputs = os.getenv(\"CALLER_INPUTS\")\ninputs = os.getenv(\"\
        INPUTS\")\nsecrets = os.getenv(\"SECRETS\")\neventName = os.getenv(\"EVENT_NAME\"\
        )\n\nif inputs is not None and inputs != '':\n  inputs = json.loads(inputs)\n\
        if secrets is not None and secrets != '':\n  secrets = json.loads(secrets)\
        \          \nif eventName == 'workflow_call' and callerInputs is not None\
        \ and callerInputs != 'null':\n  os.system(f\"echo 'Processing caller inputs'\"\
        )\n  inputs = json.loads(callerInputs)\n\nif inputs is not None and 'INPUTS'\
        \ in inputs:\n  os.system(\"echo 'Processing inputs from caller'\")\n  inputs\
        \ = json.loads(inputs['INPUTS'])\nif 'SECRETS' in secrets:\n  os.system(\"\
        echo 'Processing secrets from caller'\")\n  secrets = json.loads(secrets['SECRETS'])\n\
        \n# Iterate over secrets then inputs and assign them as outputs on this step\n\
        \nif secrets is not None and secrets != 'null':\n  for key, value in secrets.items():\n\
        \    os.system(f\"echo 'Outputting secret: {key}'\")\n    lines = len(value.split(\"\
        \\n\"))\n    if lines > 1:\n        os.system(f\"echo '{key}<<EEOOFF\\n{value}\\\
        nEEOOFF' >> $GITHUB_OUTPUT\")\n    else:\n        os.system(f\"echo '{key}={value}'\
        \ >> $GITHUB_OUTPUT\")\n\nif inputs is not None and inputs != 'null':\n  for\
        \ key, value in inputs.items():\n    os.system(f\"echo 'Outputting input:\
        \ {key}'\")\n    lines = len(value.split(\"\\n\"))\n    if lines > 1:\n  \
        \      os.system(f\"echo '{key}<<EEOOFF\\n{value}\\nEEOOFF' >> $GITHUB_OUTPUT\"\
        )\n    else:\n        os.system(f\"echo '{key}={value}' >> $GITHUB_OUTPUT\"\
        )\n"
      shell: python
    - continue-on-error: true
      id: ip-address
      name: Public IP
      uses: haythem/public-ip@v1.3
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 200
        ref: ${{ steps.inputs-and-secrets.outputs.COMMIT }}
        submodules: recursive
    - continue-on-error: true
      id: backend-files-changed
      if: github.event_name == 'pull_request'
      name: Backend files changed
      uses: tj-actions/changed-files@v35
      with:
        files_ignore: '.ci_cd/**

          console/**

          deployment/**

          setup/**

          ui/**

          **/*.md

          **/*.yml

          manager/src/web/**

          '
    - continue-on-error: true
      id: ui-files-changed
      if: github.event_name == 'pull_request'
      name: UI files changed
      uses: tj-actions/changed-files@v35
      with:
        files: 'ui/app/manager/**

          ui/component/**

          '
        files_ignore: '**/*.md

          **/*.yml

          '
    - continue-on-error: true
      id: skip-backend-tests
      if: steps.backend-files-changed.outputs.any_modified != 'true'
      name: Set skip backend manager tests
      run: echo "value=true" >> $GITHUB_OUTPUT
    - continue-on-error: true
      id: skip-ui-tests
      if: steps.ui-files-changed.outputs.any_modified != 'true'
      name: Set skip UI tests
      run: echo "value=true" >> $GITHUB_OUTPUT
    - continue-on-error: true
      name: Make cache dirs and set file permissions
      run: 'chmod +x gradlew

        mkdir -p ~/manager-tags-old

        mkdir -p ~/manager-tags-new

        '
    - continue-on-error: true
      env:
        REPO_NAME: ${{ github.repository }}
      id: is_main_repo
      name: Check if main repo
      run: "if [ $REPO_NAME == 'openremote/openremote' ]; then\n  echo \"value=true\"\
        \ >> $GITHUB_OUTPUT\nfi\n"
    - continue-on-error: true
      id: check_deployment_gradle
      name: Check deployment build.gradle
      uses: andstor/file-existence-action@v2
      with:
        files: deployment/build.gradle
    - continue-on-error: true
      id: check_deployment_dockerfile
      name: Check deployment dockerfile
      uses: andstor/file-existence-action@v2
      with:
        files: deployment/Dockerfile
    - continue-on-error: true
      id: check_custom_project
      name: Check custom project
      uses: andstor/file-existence-action@v2
      with:
        files: openremote,.gitmodules
    - continue-on-error: true
      id: check_cicd_json
      name: Check ci_cd existence
      uses: andstor/file-existence-action@v2
      with:
        files: .ci_cd/ci_cd.json
    - continue-on-error: true
      env:
        IS_CUSTOM_PROJECT: ${{ steps.check_custom_project.outputs.files_exists }}
      if: ${{ github.event_name == 'schedule' }}
      name: Check is custom project when scheduled trigger
      run: "if [ \"$IS_CUSTOM_PROJECT\" != 'true' ]; then\n  echo \"Schedule can only\
        \ be used on a custom project repo\"\n  exit 1\nfi\n"
    - continue-on-error: true
      env:
        EVENT_NAME: ${{ github.event_name }}
        REF_NAME: ${{ github.ref_name }}
      id: monitor-tags
      if: ${{ steps.check_cicd_json.outputs.files_exists == 'true' && github.event_name
        == 'schedule' }}
      name: Get docker tags to monitor
      run: "import json\nimport os\n\neventName = os.getenv('EVENT_NAME')\nrefName\
        \ = os.getenv('REF_NAME')\npushTag = None\ndeployTag = None\ndeployEnvironment\
        \ = None\n\nf = open(\".ci_cd/ci_cd.json\")\ndata = json.load(f)\nf.close()\n\
        \nif \"managerDockerPush\" in data:\n  managerPushConfig = data[\"managerDockerPush\"\
        ]\n\n  if managerPushConfig is not None:\n    if len(managerPushConfig.keys())\
        \ > 0:\n      for key in managerPushConfig.keys():\n        # Output new tag\
        \ cache files (for generating hash)\n        os.system(f\"echo 'Outputting\
        \ manifest info for tag: {key}'\")\n        os.system(f\"docker buildx imagetools\
        \ inspect --raw openremote/manager:{key} > ~/manager-tags-new/{key}\")\n \
        \   os.system(\"echo 'Tag manifests generated:'\")\n    os.system(\"find ~/manager-tags-new\"\
        )\n"
      shell: python
    - continue-on-error: true
      id: manager-tag-cache
      if: ${{ steps.check_cicd_json.outputs.files_exists == 'true' && github.event_name
        == 'schedule' }}
      name: Load manager tag cache
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-manager-tags---${{ hashFiles('~/manager-tags-new/**')
          }}
        path: '~/manager-tags-old

          '
        restore-keys: '${{ runner.os }}-manager-tags---

          '
    - continue-on-error: true
      env:
        EVENT_NAME: ${{ github.event_name }}
        IS_MAIN_REPO: ${{ steps.is_main_repo.outputs.value }}
        REF_NAME: ${{ github.ref_name }}
      id: ci-cd-output
      if: ${{ steps.check_cicd_json.outputs.files_exists == 'true' && github.event_name
        != 'workflow_dispatch' && github.event_name != 'pull_request' }}
      name: Process ci_cd.json file
      run: "import json\nimport os\n\neventName = os.getenv('EVENT_NAME')\nrefName\
        \ = os.getenv('REF_NAME')\nisMainRepo = os.getenv('IS_MAIN_REPO')\ndeploys\
        \ = None\ndockerPublishTags = None\nmavenPublishTag = None\ndeployEnvironment\
        \ = None\n\nf = open(\".ci_cd/ci_cd.json\")\ndata = json.load(f)\nf.close()\n\
        \nif eventName == \"schedule\":\n  eventName = \"managerDockerPush\"\n\nif\
        \ data is not None and eventName in data:              \n  eventConfig = data[eventName]\n\
        \n  if eventName == \"managerDockerPush\":\n\n    # Iterate through keys and\
        \ check if that manager docker image has changed since last execution\n  \
        \  deploys=[]\n    for key in eventConfig.keys():\n      os.system(f\"echo\
        \ 'Checking manager docker tag: {key}'\")\n      newManifestStr = None\n \
        \     oldManifestStr = None\n\n      if os.path.exists(os.path.expanduser(f\"\
        ~/manager-tags-new/{key}\")):\n        f = open(os.path.expanduser(f\"~/manager-tags-new/{key}\"\
        ))\n        newManifestStr = f.read()\n        f.close()\n      if os.path.exists(os.path.expanduser(f\"\
        ~/manager-tags-old/{key}\")):\n        f = open(os.path.expanduser(f\"~/manager-tags-old/{key}\"\
        ))\n        oldManifestStr = f.read()\n        f.close()                 \
        \ \n\n      if newManifestStr != oldManifestStr: # Not a great way to compare\
        \ but we'll assume manifest output is consistent\n        os.system(f\"echo\
        \ 'Manager docker tag has been updated: {key}'\")\n        if 'deploy' in\
        \ eventConfig[key]:\n          deployConfig = eventConfig[key]['deploy']\n\
        \          if deployConfig is not None:\n            # Inject manager tag\
        \ into deploy config (no point reacting to the manager image updating otherwise)\n\
        \            deployConfig['managerTag'] = key\n            deploys.append(deployConfig)\n\
        \        else:\n          os.system(f\"echo 'No deploy config in ci_cd.json\
        \ for manager tag {key}'\")\n      else:\n        os.system(f\"echo 'Manager\
        \ docker tag has not changed: {key}'\")\n\n  elif eventName == \"push\" and\
        \ refName in eventConfig:\n\n    eventConfig = eventConfig[refName]\n    if\
        \ eventConfig is not None:\n      deploys = eventConfig['deploy'] if 'deploy'\
        \ in eventConfig else None\n      if 'distribute' in eventConfig and 'docker'\
        \ in eventConfig['distribute']:\n        dockerPublishTags = eventConfig['distribute']['docker']\n\
        \n  elif eventName == \"release\" and refName in eventConfig:\n\n    eventConfig\
        \ = eventConfig[refName]\n    if eventConfig is not None:\n      deploys =\
        \ eventConfig['deploy'] if 'deploy' in eventConfig else {}\n      if 'distribute'\
        \ in eventConfig:\n        if 'docker' in eventConfig['distribute']:\n   \
        \        dockerPublishTags = eventConfig['distribute']['docker']\n       \
        \ if 'maven' in eventConfig['distribute']:\n           mavenPublishTag = eventConfig['distribute']['maven']\n\
        \nif dockerPublishTags is not None and isMainRepo == 'true':\n  dockerPublishTags\
        \ = dockerPublishTags.replace(\"$version\", refName)\n  firstDockerTag = dockerPublishTags.split(\"\
        ,\")[0]\n  os.system(f\"echo 'firstDockerTag={firstDockerTag}' >> $GITHUB_OUTPUT\"\
        )\n  os.system(f\" echo 'Manager tags to push to docker: {dockerPublishTags}'\"\
        )\n  dockerPublishTags = \" \".join(map(lambda t: f\"-t openremote/manager:{t.strip()}\"\
        , dockerPublishTags.split(\",\")))\n  os.system(f\"echo 'dockerTags={dockerPublishTags}'\
        \ >> $GITHUB_OUTPUT\")\n\nif mavenPublishTag is not None and isMainRepo ==\
        \ 'true':\n  mavenPublishTag = mavenPublishTag.replace(\"$version\", refName)\n\
        \  os.system(f\" echo 'Maven publish version: {mavenPublishTag}'\")\n  os.system(f\"\
        echo 'mavenTag={mavenPublishTag}' >> $GITHUB_OUTPUT\")\n\ndeployStr = None\n\
        if deploys is not None:\n  if not isinstance(deploys, list):\n    deploys\
        \ = [deploys]\n\n  deployStr = \"\"\n\n  for deploy in deploys:\n    if 'environment'\
        \ in deploy:\n      deployStr += deploy['environment']\n    deployStr += \"\
        :\"\n    if 'managerTag' in deploy:\n      deployStr += deploy['managerTag']\n\
        \    else:\n      os.system(\"echo 'Manager tag not specified so using commit\
        \ SHA'\")\n      deployStr += '#ref'\n\n    deployStr += \";\"\n\n  deployStr\
        \ = deployStr.rstrip(\";\")\n\nif deployStr is not None and len(deployStr)\
        \ > 0:\n  print(f\"Deployments to deploy: {deployStr}\")\n  os.system(f\"\
        echo 'deploys={deployStr}' >> $GITHUB_OUTPUT\")\n"
      shell: python
    - continue-on-error: true
      if: ${{ steps.check_cicd_json.outputs.files_exists == 'true' }}
      name: Copy new tag cache to old
      run: 'cd ~/manager-tags-new

        cp -r . ~/manager-tags-old/

        '
    - continue-on-error: true
      env:
        DEPLOYMENTS: ${{ steps.ci-cd-output.outputs.deploys }}
        EVENT_NAME: ${{ github.event_name }}
        INPUT_ENVIRONMENT: ${{ steps.inputs-and-secrets.outputs.ENVIRONMENT }}
        INPUT_MANAGER_TAG: ${{steps.inputs-and-secrets.outputs.MANAGER_TAG }}
      id: deployments
      name: Sanitize deployments value
      run: "deployments=$DEPLOYMENTS\n\nif [ \"$EVENT_NAME\" == 'workflow_dispatch'\
        \ ]; then\n  tag=\"$INPUT_MANAGER_TAG\"\n  if [ -z \"$INPUT_MANAGER_TAG\"\
        \ ]; then\n    tag='#ref'\n  fi\n  deployments=\"$INPUT_ENVIRONMENT:$tag\"\
        \nfi\necho \"value=$deployments\" >> $GITHUB_OUTPUT\n"
    - continue-on-error: true
      id: test-backend-command
      if: ${{ steps.skip-backend-tests.outputs.value != 'true' }}
      name: Define backend test command
      run: echo "value=./gradlew -p test test" >> $GITHUB_OUTPUT
    - continue-on-error: true
      id: test-ui-command
      if: ${{ steps.skip-ui-tests.outputs.value != 'true' }}
      name: Define UI test command
      run: echo ""
    - continue-on-error: true
      env:
        DEPLOYMENTS: ${{ steps.deployments.outputs.value }}
        FIRST_MANAGER_TAG: ${{ steps.ci-cd-output.outputs.firstDockerTag }}
        IS_CUSTOM_PROJECT: ${{ steps.check_custom_project.outputs.files_exists }}
        MANAGER_TAGS: ${{ steps.ci-cd-output.outputs.dockerTags }}
        TEST_UI_CMD: ${{ steps.test-ui-command.outputs.value }}
      id: manager-docker-command
      name: Define manager docker build command
      run: "if [ $IS_CUSTOM_PROJECT == 'true' ]; then\n  buildPath=\"openremote/manager/build/install/manager\"\
        \n  commitSha=$(cd openremote; git rev-parse HEAD; cd ..)\n  commitShaShort=$(cd\
        \ openremote; git rev-parse --short HEAD; cd ..)\nelse\n  buildPath=\"manager/build/install/manager\"\
        \n  commitSha=$(git rev-parse HEAD)\n  commitShaShort=$(git rev-parse --short\
        \ HEAD)\nfi\n  \nif [ -n \"$MANAGER_TAGS\" ] || [[ \"$DEPLOYMENTS\" == *\"\
        #ref\"* ]] || [ -n \"$TEST_UI_CMD\" ]; then\n  \n  if [ -n \"$MANAGER_TAGS\"\
        \ ]; then\n    command=\"docker build --push --build-arg GIT_COMMIT=$commitSha\
        \ --platform linux/amd64,linux/aarch64 $MANAGER_TAGS $buildPath\"\n    echo\
        \ \"pushRequired=true\" >> $GITHUB_OUTPUT\n  else\n    command=\"docker build\
        \ --build-arg GIT_COMMIT=$commitSha --platform linux/amd64,linux/aarch64 -t\
        \ openremote/manager:$commitShaShort $buildPath\"\n  fi\n  echo \"value=$command\"\
        \ >> $GITHUB_OUTPUT\nfi\necho \"buildPath=$buildPath\" >> $GITHUB_OUTPUT\n\
        echo \"refTag=$commitShaShort\" >> $GITHUB_OUTPUT\n"
      shell: bash
    - continue-on-error: true
      env:
        MAVEN_PASSWORD: ${{ steps.inputs-and-secrets.outputs._TEMP_MAVEN_PASSWORD
          }}
        MAVEN_TAG: ${{ steps.ci-cd-output.outputs.mavenTag }}
        MAVEN_USERNAME: ${{ steps.inputs-and-secrets.outputs._TEMP_MAVEN_USERNAME
          }}
        SIGNING_KEY: ${{ steps.inputs-and-secrets.outputs._TEMP_SIGNING_KEY }}
        SIGNING_PASSWORD: ${{ steps.inputs-and-secrets.outputs._TEMP_SIGNING_PASSWORD
          }}
      id: maven-publish-command
      if: ${{ steps.ci-cd-output.outputs.mavenTag != '' }}
      name: Define maven publish command
      run: 'command="./gradlew publish -PopenremoteVersion=$MAVEN_TAG -PsigningKey=$SIGNING_KEY
        -PsigningPassword=$SIGNING_PASSWORD -PpublishUsername=$MAVEN_USERNAME -PpublishPassword=$MAVEN_PASSWORD"

        echo "value=$command" >> $GITHUB_OUTPUT

        '
      shell: bash
    - continue-on-error: true
      env:
        DEPLOYMENTS: ${{ steps.deployments.outputs.value }}
        DEPLOYMENT_DOCKERFILE_EXISTS: ${{ steps.check_deployment_dockerfile.outputs.files_exists
          }}
        DEPLOYMENT_GRADLE_EXISTS: ${{ steps.check_deployment_gradle.outputs.files_exists
          }}
      id: deployment-docker-command
      name: Define deployment docker build command
      run: "if [ \"$DEPLOYMENT_DOCKERFILE_EXISTS\" == 'true' ]; then\n  if [ \"$DEPLOYMENT_GRADLE_EXISTS\"\
        \ != 'true' ]; then\n    echo \"Deployment must have a build.gradle file to\
        \ prepare the deployment files in the deployment/build dir\"\n    exit 1\n\
        \  fi\n\n  buildPath=\"deployment/build\"\n  commitSha=$(git rev-parse HEAD)\n\
        \  commitShaShort=$(git rev-parse --short HEAD)\n  echo \"buildPath=$buildPath\"\
        \ >> $GITHUB_OUTPUT\n  echo \"refTag=$commitShaShort\" >> $GITHUB_OUTPUT\n\
        \n  if [ -n \"$DEPLOYMENTS\" ]; then\n    command=\"docker build --build-arg\
        \ GIT_COMMIT=$commitSha --platform linux/amd64,linux/aarch64 -t openremote/deployment:$commitShaShort\
        \ $buildPath\"\n    echo \"value=$command\" >> $GITHUB_OUTPUT\n  fi\nfi\n"
      shell: bash
    - continue-on-error: true
      env:
        DEPLOYMENT_DOCKER_CMD: ${{ steps.deployment-docker-command.outputs.value }}
        MANAGER_DOCKER_CMD: ${{ steps.manager-docker-command.outputs.value }}
        REF_NAME: ${{ github.ref_name }}
      id: install-command
      name: Define installDist command
      run: "REF_NAME=${REF_NAME//\\//_}\nif [ -n \"$MANAGER_DOCKER_CMD\" ]; then\n\
        \  echo \"value=./gradlew installDist -PopenremoteVersion=$REF_NAME\" >> $GITHUB_OUTPUT\n\
        elif [ -n \"$DEPLOYMENT_DOCKER_CMD\" ]; then\n  echo \"value=./gradlew -p\
        \ deployment installDist\" >> $GITHUB_OUTPUT\nfi\n"
      shell: bash
    - continue-on-error: true
      if: ${{ steps.manager-docker-command.outputs.pushRequired == 'true' }}
      name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        password: ${{ steps.inputs-and-secrets.outputs._TEMP_DOCKERHUB_PASSWORD ||
          steps.inputs-and-secrets.outputs.DOCKERHUB_PASSWORD }}
        username: ${{ steps.inputs-and-secrets.outputs._TEMP_DOCKERHUB_USER || steps.inputs-and-secrets.outputs.DOCKERHUB_USER
          }}
    - continue-on-error: true
      if: ${{ steps.manager-docker-command.outputs.value != '' || steps.deployment-docker-command.outputs.value
        != '' }}
      name: set up QEMU
      uses: docker/setup-qemu-action@v2
      with:
        platforms: linux/amd64,linux/aarch64
    - continue-on-error: true
      id: buildx
      if: ${{ steps.manager-docker-command.outputs.value != '' || steps.deployment-docker-command.outputs.value
        != '' }}
      name: install buildx
      uses: docker/setup-buildx-action@v2
      with:
        install: true
        version: latest
    - continue-on-error: true
      id: java
      if: ${{ steps.install-command.outputs.value != '' || steps.test-backend-command.outputs.value
        != '' }}
      name: Set up JDK 17 and gradle cache
      uses: actions/setup-java@v3
      with:
        cache: gradle
        distribution: temurin
        java-version: '17'
    - continue-on-error: true
      id: yarn-cache-dir-path
      name: Get yarn cache directory path
      run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
    - continue-on-error: true
      id: yarn-cache
      if: steps.skip-cicd.outputs.value != 'true'
      name: Yarn cache
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-yarn---${{ hashFiles('**/yarn.lock') }}
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        restore-keys: '${{ runner.os }}-yarn---

          '
    - continue-on-error: true
      if: steps.skip-cicd.outputs.value != 'true'
      name: Output info
      run: 'echo "************************************************************"

        echo "**************            INFO           *******************"

        echo "************************************************************"

        echo ''Trigger event: ${{ github.event_name }}''

        echo ''Is main repo: ${{ steps.is_main_repo.outputs.value == ''true'' }}''

        echo ''Is custom project repo: ${{ steps.check_custom_project.outputs.files_exists
        == ''true'' }}''

        echo ''Has deployment dockerfile: ${{ steps.check_deployment_dockerfile.outputs.files_exists
        == ''true'' }}''

        echo ''Manager commit SHA: ${{ steps.manager-docker-command.outputs.refTag
        }}''

        echo ''Deployment commit SHA: ${{ steps.deployment-docker-command.outputs.refTag
        }}''

        echo ''Deployments: ${{ steps.deployments.outputs.value }}''

        echo ''Test backend command: ${{ steps.test-backend-command.outputs.value
        }}''

        echo ''Test UI command: ${{ steps.test-ui-command.outputs.value }}''

        echo ''Manager docker build command: ${{ steps.manager-docker-command.outputs.value
        }}''

        echo ''Maven publish command: ${{ steps.maven-publish-command.outputs.value
        }}''

        echo ''Deployment docker build command: ${{ steps.deployment-docker-command.outputs.value
        }}''

        echo ''InstallDist command: ${{ steps.install-command.outputs.value }}''

        echo "Java version: $(java --version)"

        echo "Yarn version: $(yarn -v)"

        echo "Node version: $(node -v)"

        echo ''Gradle cache: ${{ steps.java.outputs.cache-hit == ''true'' }}''

        echo ''Yarn cache: ${{ steps.yarn-cache.outputs.cache-hit == ''true'' }}''

        echo ''Manager tag cache: ${{ steps.manager-tag-cache.outputs.cache-hit ==
        ''true'' }}''

        echo "************************************************************"

        echo "************************************************************"

        '
    - continue-on-error: true
      env:
        IS_CUSTOM_PROJECT: ${{ steps.check_custom_project.outputs.files_exists }}
        TEST_UI_COMMAND: ${{ steps.test-ui-command.outputs.value }}
      if: ${{ steps.test-backend-command.outputs.value != '' || steps.test-ui-command.outputs.value
        != '' }}
      name: Pull docker images
      run: "# Only need keycloak and postgres services for backend testing\nif [ -z\
        \ $TEST_UI_COMMAND ]; then\n  composeProfile='profile/dev-testing.yml'\nelse\n\
        \  composeProfile='profile/dev-ui.yml'\nfi\n\nif [ $IS_CUSTOM_PROJECT == 'true'\
        \ ]; then\n  composeProfile=\"openremote/$composeProfile\"\nfi\n\n# Pull the\
        \ images\ndocker-compose -f $composeProfile pull\n"
    - continue-on-error: true
      if: ${{ steps.manager-docker-command.outputs.value != '' || steps.deployment-docker-command.outputs.value
        != '' }}
      uses: satackey/action-docker-layer-caching@v0.0.11
    - continue-on-error: true
      env:
        IS_CUSTOM_PROJECT: ${{ steps.check_custom_project.outputs.files_exists }}
      id: run-backend-tests
      if: ${{ steps.test-backend-command.outputs.value != '' }}
      name: Run backend tests
      run: "composeProfile='profile/dev-testing.yml'\n\nif [ $IS_CUSTOM_PROJECT ==\
        \ 'true' ]; then\n  composeProfile=\"openremote/$composeProfile\"        \
        \    \nfi\n\n# Make temp dir and set mask to 777 as docker seems to run as\
        \ root\nmkdir -p tmp\nchmod 777 tmp\n\n# Define cleanup command\necho \"cleanup=docker-compose\
        \ -f $composeProfile down\" >> $GITHUB_OUTPUT\n\n# Start the stack\necho \"\
        docker-compose -f ${composeProfile} up -d --no-build\"\ndocker-compose -f\
        \ ${composeProfile} up -d --no-build\n\n# Run the tests\n${{ steps.test-backend-command.outputs.value\
        \ }}\n"
      timeout-minutes: 20
    - continue-on-error: true
      if: always()
      name: Archive backend test results
      uses: actions/upload-artifact@v3
      with:
        name: backend-test-results
        path: test/build/reports/tests
    - continue-on-error: true
      if: ${{ steps.test-backend-command.outputs.value != '' && steps.test-ui-command.outputs.value
        != '' }}
      name: Cleanup backend tests
      run: ${{ steps.run-backend-tests.outputs.cleanup }}
    - continue-on-error: true
      env:
        CMD: ${{ steps.install-command.outputs.value }}
        INPUTS_AND_SECRETS: ${{ toJSON(steps.inputs-and-secrets.outputs) }}
      if: steps.install-command.outputs.value != ''
      name: Run install dist
      run: "import json\nimport os\nimport sys\nimport subprocess\n\ninputsAndSecrets\
        \ = json.loads(os.getenv(\"INPUTS_AND_SECRETS\"))\n\n# Output inputs and secrets\
        \ as environment variables for build\nfor key, value in inputsAndSecrets.items():\n\
        \  if \".\" in key:\n    continue\n\n  # Look for temp and env prefixed keys\n\
        \  if key.startswith(\"_\"):\n    if key.startswith(\"_TEMP_\"):\n      key\
        \ = key.replace(\"_TEMP_\", \"\")\n    else:\n      continue\n\n  os.system(f\"\
        echo 'Setting environment variable {key}...'\")\n  os.putenv(key, value)\n\
        \nbuildCmd = os.getenv(\"CMD\")\nresult = subprocess.run(f\"{buildCmd}\",\
        \ shell=True)\n\nif result.returncode != 0:\n  os.system(\"echo 'installDist\
        \ failed'\")\n  sys.exit(result.returncode)\n"
      shell: python
      timeout-minutes: 20
    - continue-on-error: true
      if: steps.manager-docker-command.outputs.value != ''
      name: Run manager docker build command
      run: '${{ steps.manager-docker-command.outputs.value }}

        '
    - continue-on-error: true
      if: steps.maven-publish-command.outputs.value != ''
      name: Run maven publish command
      run: '${{ steps.maven-publish-command.outputs.value }}

        '
    - continue-on-error: true
      env:
        IS_CUSTOM_PROJECT: ${{ steps.check_custom_project.outputs.files_exists }}
        MANAGER_TAG: ${{ steps.manager-docker-command.outputs.refTag }}
      if: steps.test-ui-command.outputs.value != ''
      name: Run frontend tests
      run: "composeProfile='profile/dev-ui.yml'\n\nif [ $IS_CUSTOM_PROJECT == 'true'\
        \ ]; then\n  composeProfile=\"openremote/$composeProfile\"            \nfi\n\
        \n# Start the stack          \nMANAGER_VERSION=$MANAGER_TAG docker-compose\
        \ -f $composeProfile up -d --no-build\n\n# Run the tests\n${{ steps.test-ui-command.outputs.value\
        \ }}\n"
      timeout-minutes: 20
    - continue-on-error: true
      if: steps.deployment-docker-command.outputs.value != ''
      name: Run deployment docker command
      run: '${{ steps.deployment-docker-command.outputs.value }}

        '
    - continue-on-error: true
      env:
        DEPLOYMENTS: ${{ steps.deployments.outputs.value }}
        DEPLOYMENT_DOCKER_BUILD_PATH: ${{ steps.deployment-docker-command.outputs.buildPath
          }}
        DEPLOYMENT_REF: ${{ steps.deployment-docker-command.outputs.refTag }}
        INPUTS_AND_SECRETS: ${{ toJSON(steps.inputs-and-secrets.outputs) }}
        IPV4: ${{ steps.ip-address.outputs.ipv4 }}
        IPV6: ${{ steps.ip-address.outputs.ipv6 }}
        IS_CUSTOM_PROJECT: ${{ steps.check_custom_project.outputs.files_exists }}
        MANAGER_DOCKER_BUILD_PATH: ${{ steps.manager-docker-command.outputs.buildPath
          }}
        MANAGER_REF: ${{ steps.manager-docker-command.outputs.refTag }}
        REPO_NAME: ${{ github.repository }}
      if: steps.deployments.outputs.value != ''
      name: Do deployments
      run: "import json\nimport os\nimport sys\nimport subprocess\n\ndeployments =\
        \ os.getenv(\"DEPLOYMENTS\")\ndeployments = deployments.split(\";\")\nmanagerRef\
        \ = os.getenv(\"MANAGER_REF\")\ndeploymentRef = os.getenv(\"DEPLOYMENT_REF\"\
        )\nisCustomProject = os.getenv(\"IS_CUSTOM_PROJECT\")\ninputsAndSecrets =\
        \ json.loads(os.getenv(\"INPUTS_AND_SECRETS\"))\nipv4 = os.getenv(\"IPV4\"\
        )\nipv6 = os.getenv(\"IPV6\")\n\nfailure = False\n\n# Determine deploy script\
        \ to use\ndeployScript = \".ci_cd/deploy.sh\"\n\nif not os.path.exists(deployScript)\
        \ and isCustomProject == 'true':\n  deployScript = \"openremote/.ci_cd/deploy.sh\"\
        \n\nif not os.path.exists(deployScript):\n  os.system(f\"Deploy script not\
        \ found '{deployScript}'\")\n  sys.exit(1)\n\nfor deployment in deployments:\n\
        \  dep = deployment.split(\":\")\n  env = dep[0]\n  managerTag = dep[1]\n\
        \  managerTagFound = True\n\n  os.putenv(\"MANAGER_TAG\", managerTag)\n  os.putenv(\"\
        ENVIRONMENT\", env)\n\n  # Clean stale ssh credentials and temp files\n  os.system(\"\
        rm temp.env 2>/dev/null\")\n  os.system(\"rm ssh.key 2>/dev/null\")\n  os.system(\"\
        rm -r temp 2>/dev/null\")\n  os.system(\"mkdir temp\")\n\n  # ------------------------------------------------------\n\
        \  # Output env variables to temp env file for POSIX shell\n  # ------------------------------------------------------\n\
        \n  # Output inputs and secrets (spacial handling for SSH_KEY and some other\
        \ variables)\n  # _$ENV_ prefixed keys are output last (to override any non\
        \ env specific keys)\n  environment = (env if env else \"\").upper()\n  prefix\
        \ = \"_\" + environment + \"_\"\n\n  for key, value in inputsAndSecrets.items():\n\
        \    if \".\" in key:\n      continue\n\n    envFile = \"temp/env\"\n\n  \
        \  # Look for temp and env prefixed keys\n    if key.startswith(\"_\"):\n\
        \      if key.startswith(\"_TEMP_\"):\n        key = key.replace(\"_TEMP_\"\
        , \"\")\n        envFile = \"temp.env\"\n      elif key.startswith(prefix):\n\
        \        key = key.replace(prefix, \"\")\n      else:\n        continue\n\n\
        \    if key == \"github_token\":\n      continue\n    else:              \
        \  \n      os.system(f\"echo 'Secret found {key}...'\")\n      if key == \"\
        SSH_KEY\":\n        os.system(f\"echo \\\"{value}\\\" > ssh.key\")\n     \
        \ else:\n        lines = len(value.split(\"\\n\"))\n        if lines > 1:\n\
        \            os.system(f\"echo '{key}='\\\"'\\\"'' >> {envFile}\")\n     \
        \       os.system(f\"echo '{value}'\\\"'\\\"'' >> {envFile}\")\n        else:\n\
        \            os.system(f\"echo '{key}='\\\"'\\\"'{value}'\\\"'\\\"'' >> {envFile}\"\
        )\n\n  # Output env file if exists\n  if os.path.exists(\".ci_cd/env/.env\"\
        ):\n    os.system(f\"echo 'Outputting .ci_cd/env/.env to temp/env'\")\n  \
        \  os.system(\"cat .ci_cd/env/.env >> temp/env\")\n\n  # Output environment\
        \ specific env file if exists\n  if env is not None and env != '' and os.path.exists(f\"\
        .ci_cd/env/{env}.env\"):\n    os.system(f\"echo 'Outputting .ci_cd/env/{env}.env\
        \ to temp/env'\")\n    os.system(f\"cat .ci_cd/env/{env}.env >> temp/env\"\
        )\n  \n  # Set CIDR environment variable\n  if ipv4 is not None and ipv4 !=\
        \ '':\n    os.putenv(\"CIDR\", ipv4 + '/32')\n  elif ipv6 is not None and\
        \ ipv6 != '':\n    os.putenv(\"CIDR\", ipv6 + '/64')\n  \n  # Execute deploy\
        \ script\n  os.system(f\"echo 'Executing deploy script for deployment: managerTag={managerTag}\
        \ deploymentTag={deploymentRef} environment={env}'\")\n  # Uncomment this\
        \ in combination with the SSH debug step afterwards to debug deployment script\n\
        \  #sys.exit(0)\n  result = subprocess.run(f\"bash {deployScript}\", shell=True)\n\
        \n  if result.returncode != 0:\n    os.system(f\"echo 'Deployment failed:\
        \ managerTag={managerTag} deploymentTag={deploymentRef} environment={env}'\"\
        )\n    failure = True\n    continue\n\nif failure == True:\n  os.system(\"\
        echo 'One or more deployments failed'\")\n  sys.exit(1)\n"
      shell: python
name: CI/CD
on:
  repository_dispatch:
    types: trigger-ga___ci_cd.yml
